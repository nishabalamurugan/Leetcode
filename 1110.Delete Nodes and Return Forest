/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
        List<TreeNode> res=new ArrayList<>();
        if(root==null)
        {
            return res;
        } 
        HashSet<Integer> del=new HashSet<>();
        for(int i=0;i<to_delete.length;i++)
        {
            del.add(to_delete[i]);
        }
        Queue<TreeNode> queue=new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            TreeNode node=queue.poll();
            if(node.left!=null)
            {
                queue.offer(node.left);
                if(del.contains(node.left.val))
                {
                    node.left=null;
                }

            }
            if(node.right!=null)
            {
                queue.offer(node.right);
                if(del.contains(node.right.val))
                {
                    node.right=null;
                }
            }
            if(del.contains(node.val))
            {
                if(node.left!=null)
                {
                    res.add(node.left);
                }
                if(node.right!=null)
                {
                    res.add(node.right);
                }
            }
            else if(res.isEmpty())
            {
                res.add(node);
            }
        }
        return res;
        
    }
}
